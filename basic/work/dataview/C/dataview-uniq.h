#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccUint asn1SccMyInteger;


flag asn1SccMyInteger_Equal(const asn1SccMyInteger* pVal1, const asn1SccMyInteger* pVal2);

#define ERR_MYINTEGER		1  /*(0 .. 10000)*/
flag asn1SccMyInteger_IsConstraintValid(const asn1SccMyInteger* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccMyInteger asn1SccMyInteger_constant;
#else
#define asn1SccMyInteger_constant 0UL
#endif

void asn1SccMyInteger_Initialize(asn1SccMyInteger* pVal);

#define ERR_UPER_ENCODE_MYINTEGER		2  /**/
#define asn1SccMyInteger_REQUIRED_BYTES_FOR_ENCODING       2
#define asn1SccMyInteger_REQUIRED_BITS_FOR_ENCODING        14

flag asn1SccMyInteger_Encode(const asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYINTEGER		3  /**/
flag asn1SccMyInteger_Decode(asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccMyInteger_REQUIRED_BYTES_FOR_ACN_ENCODING       2
#define asn1SccMyInteger_REQUIRED_BITS_FOR_ACN_ENCODING        14

#define ERR_ACN_ENCODE_MYINTEGER		4  /**/

flag asn1SccMyInteger_ACN_Encode(const asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MYINTEGER		5  /**/
flag asn1SccMyInteger_ACN_Decode(asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int32;


flag asn1SccT_Int32_Equal(const asn1SccT_Int32* pVal1, const asn1SccT_Int32* pVal2);

#define ERR_T_INT32		6  /*(-2147483648 .. 2147483647)*/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccT_Int32 asn1SccT_Int32_constant;
#else
#define asn1SccT_Int32_constant 0LL
#endif

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_UPER_ENCODE_T_INT32		7  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		8  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING       4
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ACN_ENCODING        32

#define ERR_ACN_ENCODE_T_INT32		9  /**/

flag asn1SccT_Int32_ACN_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT32		10  /**/
flag asn1SccT_Int32_ACN_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


flag asn1SccT_UInt32_Equal(const asn1SccT_UInt32* pVal1, const asn1SccT_UInt32* pVal2);

#define ERR_T_UINT32		11  /*(0 .. 4294967295)*/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccT_UInt32 asn1SccT_UInt32_constant;
#else
#define asn1SccT_UInt32_constant 0UL
#endif

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_UPER_ENCODE_T_UINT32		12  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		13  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING       4
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING        32

#define ERR_ACN_ENCODE_T_UINT32		14  /**/

flag asn1SccT_UInt32_ACN_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT32		15  /**/
flag asn1SccT_UInt32_ACN_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Runtime_Error --------------------------------------------*/

typedef enum {
    T_Runtime_Error_NONE,
    T_Runtime_Error_noerror_PRESENT,
    T_Runtime_Error_encodeerror_PRESENT,
    T_Runtime_Error_decodeerror_PRESENT
} asn1SccT_Runtime_Error_selection;

typedef union {
    asn1SccT_UInt32 noerror;
    asn1SccT_Int32 encodeerror;
    asn1SccT_Int32 decodeerror;
} asn1SccT_Runtime_Error_unchecked_union;

typedef struct {
    asn1SccT_Runtime_Error_selection kind;

    asn1SccT_Runtime_Error_unchecked_union u;
} asn1SccT_Runtime_Error;

flag asn1SccT_Runtime_Error_Equal(const asn1SccT_Runtime_Error* pVal1, const asn1SccT_Runtime_Error* pVal2);

#define ERR_T_RUNTIME_ERROR		46  /**/
#define ERR_T_RUNTIME_ERROR_NOERROR_2		21  /**/
#define ERR_T_RUNTIME_ERROR_ENCODEERROR_2		31  /**/
#define ERR_T_RUNTIME_ERROR_DECODEERROR_2		41  /**/
flag asn1SccT_Runtime_Error_IsConstraintValid(const asn1SccT_Runtime_Error* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccT_Runtime_Error asn1SccT_Runtime_Error_constant;
#else
#define asn1SccT_Runtime_Error_constant {.kind = T_Runtime_Error_noerror_PRESENT, .u.noerror = 0UL}
#endif

void asn1SccT_Runtime_Error_Initialize(asn1SccT_Runtime_Error* pVal);

#define ERR_UPER_ENCODE_T_RUNTIME_ERROR		47  /**/
#define ERR_UPER_ENCODE_T_RUNTIME_ERROR_NOERROR_2		22  /**/
#define ERR_UPER_ENCODE_T_RUNTIME_ERROR_ENCODEERROR_2		32  /**/
#define ERR_UPER_ENCODE_T_RUNTIME_ERROR_DECODEERROR_2		42  /**/
#define asn1SccT_Runtime_Error_REQUIRED_BYTES_FOR_ENCODING       5
#define asn1SccT_Runtime_Error_REQUIRED_BITS_FOR_ENCODING        34

flag asn1SccT_Runtime_Error_Encode(const asn1SccT_Runtime_Error* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_RUNTIME_ERROR		48  /**/
#define ERR_UPER_DECODE_T_RUNTIME_ERROR_NOERROR_2		23  /**/
#define ERR_UPER_DECODE_T_RUNTIME_ERROR_ENCODEERROR_2		33  /**/
#define ERR_UPER_DECODE_T_RUNTIME_ERROR_DECODEERROR_2		43  /**/
flag asn1SccT_Runtime_Error_Decode(asn1SccT_Runtime_Error* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_Runtime_Error_REQUIRED_BYTES_FOR_ACN_ENCODING       5
#define asn1SccT_Runtime_Error_REQUIRED_BITS_FOR_ACN_ENCODING        34

#define ERR_ACN_ENCODE_T_RUNTIME_ERROR		49  /**/
#define ERR_ACN_ENCODE_T_RUNTIME_ERROR_NOERROR_2		24  /**/
#define ERR_ACN_ENCODE_T_RUNTIME_ERROR_ENCODEERROR_2		34  /**/
#define ERR_ACN_ENCODE_T_RUNTIME_ERROR_DECODEERROR_2		44  /**/

flag asn1SccT_Runtime_Error_ACN_Encode(const asn1SccT_Runtime_Error* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_RUNTIME_ERROR		50  /**/
#define ERR_ACN_DECODE_T_RUNTIME_ERROR_NOERROR_2		25  /**/
#define ERR_ACN_DECODE_T_RUNTIME_ERROR_ENCODEERROR_2		35  /**/
#define ERR_ACN_DECODE_T_RUNTIME_ERROR_DECODEERROR_2		45  /**/
flag asn1SccT_Runtime_Error_ACN_Decode(asn1SccT_Runtime_Error* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


flag asn1SccT_Int8_Equal(const asn1SccT_Int8* pVal1, const asn1SccT_Int8* pVal2);

#define ERR_T_INT8		51  /*(-128 .. 127)*/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccT_Int8 asn1SccT_Int8_constant;
#else
#define asn1SccT_Int8_constant 0LL
#endif

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_UPER_ENCODE_T_INT8		52  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		53  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ACN_ENCODING        8

#define ERR_ACN_ENCODE_T_INT8		54  /**/

flag asn1SccT_Int8_ACN_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT8		55  /**/
flag asn1SccT_Int8_ACN_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


flag asn1SccT_UInt8_Equal(const asn1SccT_UInt8* pVal1, const asn1SccT_UInt8* pVal2);

#define ERR_T_UINT8		56  /*(0 .. 255)*/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccT_UInt8 asn1SccT_UInt8_constant;
#else
#define asn1SccT_UInt8_constant 0UL
#endif

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_UPER_ENCODE_T_UINT8		57  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		58  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

#define ERR_ACN_ENCODE_T_UINT8		59  /**/

flag asn1SccT_UInt8_ACN_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT8		60  /**/
flag asn1SccT_UInt8_ACN_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


flag asn1SccT_Boolean_Equal(const asn1SccT_Boolean* pVal1, const asn1SccT_Boolean* pVal2);

#define ERR_T_BOOLEAN		61  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccT_Boolean asn1SccT_Boolean_constant;
#else
#define asn1SccT_Boolean_constant FALSE
#endif

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_UPER_ENCODE_T_BOOLEAN		62  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		63  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING        1

#define ERR_ACN_ENCODE_T_BOOLEAN		64  /**/

flag asn1SccT_Boolean_ACN_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BOOLEAN		65  /**/
flag asn1SccT_Boolean_ACN_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Null_Record --------------------------------------------*/
typedef struct {

} asn1SccT_Null_Record;

flag asn1SccT_Null_Record_Equal(const asn1SccT_Null_Record* pVal1, const asn1SccT_Null_Record* pVal2);

#define ERR_T_NULL_RECORD		66  /**/
flag asn1SccT_Null_Record_IsConstraintValid(const asn1SccT_Null_Record* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccT_Null_Record asn1SccT_Null_Record_constant;
#else
#define asn1SccT_Null_Record_constant {}
#endif

void asn1SccT_Null_Record_Initialize(asn1SccT_Null_Record* pVal);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccT_Null_Record_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ACN_ENCODING       0
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ACN_ENCODING        0


flag asn1SccT_Null_Record_ACN_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_ACN_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccPID_Range;


flag asn1SccPID_Range_Equal(const asn1SccPID_Range* pVal1, const asn1SccPID_Range* pVal2);

#define ERR_PID_RANGE		71  /*(0..1)*/
flag asn1SccPID_Range_IsConstraintValid(const asn1SccPID_Range* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccPID_Range asn1SccPID_Range_constant;
#else
#define asn1SccPID_Range_constant 0UL
#endif

void asn1SccPID_Range_Initialize(asn1SccPID_Range* pVal);

#define ERR_UPER_ENCODE_PID_RANGE		72  /**/
#define asn1SccPID_Range_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccPID_Range_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccPID_Range_Encode(const asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID_RANGE		73  /**/
flag asn1SccPID_Range_Decode(asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccPID_Range_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define asn1SccPID_Range_REQUIRED_BITS_FOR_ACN_ENCODING        1

#define ERR_ACN_ENCODE_PID_RANGE		74  /**/

flag asn1SccPID_Range_ACN_Encode(const asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PID_RANGE		75  /**/
flag asn1SccPID_Range_ACN_Decode(asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    PID_function1 = 0,
    PID_env = 1
} asn1SccPID;

// please use the following macros to avoid breaking code.
#define asn1SccPID_function1 PID_function1
#define asn1SccPID_env PID_env

flag asn1SccPID_Equal(const asn1SccPID* pVal1, const asn1SccPID* pVal2);

#define ERR_PID		76  /*function1 | env*/
flag asn1SccPID_IsConstraintValid(const asn1SccPID* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccPID asn1SccPID_constant;
#else
#define asn1SccPID_constant PID_function1
#endif

void asn1SccPID_Initialize(asn1SccPID* pVal);

#define ERR_UPER_ENCODE_PID		77  /**/
#define asn1SccPID_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccPID_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccPID_Encode(const asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID		78  /**/
flag asn1SccPID_Decode(asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccPID_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define asn1SccPID_REQUIRED_BITS_FOR_ACN_ENCODING        1

#define ERR_ACN_ENCODE_PID		79  /**/

flag asn1SccPID_ACN_Encode(const asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PID		80  /**/
flag asn1SccPID_ACN_Decode(asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode);


/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */



#ifdef  __cplusplus
}

#endif

#endif
