/*

   C_ASN1_Types.h
   Generated by kazoo/templates/concurrency_view/c_asn1_types_h/partition.tmplt
   Contains encoding and decoding functions for ASN.1 types, with conditional
   compilation if types are never encoded due to using only native encodings.
*/

#pragma once

#include <stddef.h>   // for size_t

#ifndef STATIC
   #define STATIC
#endif

#include "dataview-uniq.h"

#include "../../system_config.h"

#ifdef __NEED_TestArray_ACN

   int Encode_ACN_TestArray(void *pBuffer, size_t iMaxBufferSize, asn1SccTestArray *pSrc, int *errorCode);
   int Decode_ACN_TestArray(asn1SccTestArray *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif

#ifdef __NEED_TestArray_UPER
   int Encode_UPER_TestArray(void *pBuffer, size_t iMaxBufferSize, const asn1SccTestArray *pSrc, int *errorCode);
   int Decode_UPER_TestArray(asn1SccTestArray *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif
#ifdef __NEED_TestInteger_ACN

   int Encode_ACN_TestInteger(void *pBuffer, size_t iMaxBufferSize, asn1SccTestInteger *pSrc, int *errorCode);
   int Decode_ACN_TestInteger(asn1SccTestInteger *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif

#ifdef __NEED_TestInteger_UPER
   int Encode_UPER_TestInteger(void *pBuffer, size_t iMaxBufferSize, const asn1SccTestInteger *pSrc, int *errorCode);
   int Decode_UPER_TestInteger(asn1SccTestInteger *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif
#ifdef __NEED_TestStruct_ACN

   int Encode_ACN_TestStruct(void *pBuffer, size_t iMaxBufferSize, asn1SccTestStruct *pSrc, int *errorCode);
   int Decode_ACN_TestStruct(asn1SccTestStruct *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif

#ifdef __NEED_TestStruct_UPER
   int Encode_UPER_TestStruct(void *pBuffer, size_t iMaxBufferSize, const asn1SccTestStruct *pSrc, int *errorCode);
   int Decode_UPER_TestStruct(asn1SccTestStruct *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif
#ifdef __NEED_T_Boolean_ACN

   int Encode_ACN_T_Boolean(void *pBuffer, size_t iMaxBufferSize, asn1SccT_Boolean *pSrc, int *errorCode);
   int Decode_ACN_T_Boolean(asn1SccT_Boolean *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif

#ifdef __NEED_T_Boolean_UPER
   int Encode_UPER_T_Boolean(void *pBuffer, size_t iMaxBufferSize, const asn1SccT_Boolean *pSrc, int *errorCode);
   int Decode_UPER_T_Boolean(asn1SccT_Boolean *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif
#ifdef __NEED_T_Int32_ACN

   int Encode_ACN_T_Int32(void *pBuffer, size_t iMaxBufferSize, asn1SccT_Int32 *pSrc, int *errorCode);
   int Decode_ACN_T_Int32(asn1SccT_Int32 *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif

#ifdef __NEED_T_Int32_UPER
   int Encode_UPER_T_Int32(void *pBuffer, size_t iMaxBufferSize, const asn1SccT_Int32 *pSrc, int *errorCode);
   int Decode_UPER_T_Int32(asn1SccT_Int32 *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif
#ifdef __NEED_T_Int8_ACN

   int Encode_ACN_T_Int8(void *pBuffer, size_t iMaxBufferSize, asn1SccT_Int8 *pSrc, int *errorCode);
   int Decode_ACN_T_Int8(asn1SccT_Int8 *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif

#ifdef __NEED_T_Int8_UPER
   int Encode_UPER_T_Int8(void *pBuffer, size_t iMaxBufferSize, const asn1SccT_Int8 *pSrc, int *errorCode);
   int Decode_UPER_T_Int8(asn1SccT_Int8 *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif
#ifdef __NEED_T_Null_Record_ACN

   int Encode_ACN_T_Null_Record(void *pBuffer, size_t iMaxBufferSize, asn1SccT_Null_Record *pSrc, int *errorCode);
   int Decode_ACN_T_Null_Record(asn1SccT_Null_Record *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif

#ifdef __NEED_T_Null_Record_UPER
   int Encode_UPER_T_Null_Record(void *pBuffer, size_t iMaxBufferSize, const asn1SccT_Null_Record *pSrc, int *errorCode);
   int Decode_UPER_T_Null_Record(asn1SccT_Null_Record *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif
#ifdef __NEED_T_Runtime_Error_ACN

   int Encode_ACN_T_Runtime_Error(void *pBuffer, size_t iMaxBufferSize, asn1SccT_Runtime_Error *pSrc, int *errorCode);
   int Decode_ACN_T_Runtime_Error(asn1SccT_Runtime_Error *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif

#ifdef __NEED_T_Runtime_Error_UPER
   int Encode_UPER_T_Runtime_Error(void *pBuffer, size_t iMaxBufferSize, const asn1SccT_Runtime_Error *pSrc, int *errorCode);
   int Decode_UPER_T_Runtime_Error(asn1SccT_Runtime_Error *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif
#ifdef __NEED_T_UInt32_ACN

   int Encode_ACN_T_UInt32(void *pBuffer, size_t iMaxBufferSize, asn1SccT_UInt32 *pSrc, int *errorCode);
   int Decode_ACN_T_UInt32(asn1SccT_UInt32 *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif

#ifdef __NEED_T_UInt32_UPER
   int Encode_UPER_T_UInt32(void *pBuffer, size_t iMaxBufferSize, const asn1SccT_UInt32 *pSrc, int *errorCode);
   int Decode_UPER_T_UInt32(asn1SccT_UInt32 *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif
#ifdef __NEED_T_UInt8_ACN

   int Encode_ACN_T_UInt8(void *pBuffer, size_t iMaxBufferSize, asn1SccT_UInt8 *pSrc, int *errorCode);
   int Decode_ACN_T_UInt8(asn1SccT_UInt8 *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif

#ifdef __NEED_T_UInt8_UPER
   int Encode_UPER_T_UInt8(void *pBuffer, size_t iMaxBufferSize, const asn1SccT_UInt8 *pSrc, int *errorCode);
   int Decode_UPER_T_UInt8(asn1SccT_UInt8 *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif
#ifdef __NEED_PID_ACN

   int Encode_ACN_PID(void *pBuffer, size_t iMaxBufferSize, asn1SccPID *pSrc, int *errorCode);
   int Decode_ACN_PID(asn1SccPID *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif

#ifdef __NEED_PID_UPER
   int Encode_UPER_PID(void *pBuffer, size_t iMaxBufferSize, const asn1SccPID *pSrc, int *errorCode);
   int Decode_UPER_PID(asn1SccPID *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif
#ifdef __NEED_PID_Range_ACN

   int Encode_ACN_PID_Range(void *pBuffer, size_t iMaxBufferSize, asn1SccPID_Range *pSrc, int *errorCode);
   int Decode_ACN_PID_Range(asn1SccPID_Range *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif

#ifdef __NEED_PID_Range_UPER
   int Encode_UPER_PID_Range(void *pBuffer, size_t iMaxBufferSize, const asn1SccPID_Range *pSrc, int *errorCode);
   int Decode_UPER_PID_Range(asn1SccPID_Range *pDst, void *pBuffer, size_t iBufferSize, int *errorCode);

#endif

