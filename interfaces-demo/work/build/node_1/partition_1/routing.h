/* File generated by kazoo for TASTE - do not edit */

#include "dataview-uniq.h"
#include "system_spec.h"

#define USE_THREAD_LOCAL_STRORAGE
#include <threads.h>
#define PID_STORAGE_CLASS __thread

#define PARTITION_NAME PARTITION_1

extern enum RemoteInterface bus_to_unique_port_map[];
extern int bus_has_any_destination_port[];

// Enable all routes
void initialize_routing(void);



// Routing table of function corecomponent

// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern volatile bool corecomponent_computep_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void corecomponent_computep_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void corecomponent_computep_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void corecomponent_computep_set_all_routes_enabled(bool are_enabled);
// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern volatile bool corecomponent_computeup_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void corecomponent_computeup_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void corecomponent_computeup_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void corecomponent_computeup_set_all_routes_enabled(bool are_enabled);
// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern volatile bool corecomponent_tm_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void corecomponent_tm_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void corecomponent_tm_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void corecomponent_tm_set_all_routes_enabled(bool are_enabled);



// Pid of the sender function containing required interface
// invoking this provided interface
extern PID_STORAGE_CLASS asn1SccPID corecomponent_tc_sender_pid;

// Get sender pid for this provided interface
asn1SccPID corecomponent_tc_get_sender();




// Routing table of function orchestratorcomponent

// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern volatile bool orchestratorcomponent_tc_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void orchestratorcomponent_tc_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void orchestratorcomponent_tc_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void orchestratorcomponent_tc_set_all_routes_enabled(bool are_enabled);



// Pid of the sender function containing required interface
// invoking this provided interface
extern PID_STORAGE_CLASS asn1SccPID orchestratorcomponent_tm_sender_pid;

// Get sender pid for this provided interface
asn1SccPID orchestratorcomponent_tm_get_sender();
// Pid of the sender function containing required interface
// invoking this provided interface
extern PID_STORAGE_CLASS asn1SccPID orchestratorcomponent_trigger_sender_pid;

// Get sender pid for this provided interface
asn1SccPID orchestratorcomponent_trigger_get_sender();






// Pid of the sender function containing required interface
// invoking this provided interface
extern PID_STORAGE_CLASS asn1SccPID utilitycomponent_computep_sender_pid;

// Get sender pid for this provided interface
asn1SccPID utilitycomponent_computep_get_sender();



// Pid of the sender function containing required interface
// invoking this provided interface
extern PID_STORAGE_CLASS asn1SccPID utilitycomponent_computeup_sender_pid;

// Get sender pid for this provided interface
asn1SccPID utilitycomponent_computeup_get_sender();



