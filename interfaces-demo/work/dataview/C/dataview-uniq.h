#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccUint asn1SccTestInteger;


flag asn1SccTestInteger_Equal(const asn1SccTestInteger* pVal1, const asn1SccTestInteger* pVal2);

#define ERR_TESTINTEGER		1  /*(0 .. 10000)*/
flag asn1SccTestInteger_IsConstraintValid(const asn1SccTestInteger* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccTestInteger asn1SccTestInteger_constant;
#else
#define asn1SccTestInteger_constant 0UL
#endif

void asn1SccTestInteger_Initialize(asn1SccTestInteger* pVal);

#define ERR_UPER_ENCODE_TESTINTEGER		2  /**/
#define asn1SccTestInteger_REQUIRED_BYTES_FOR_ENCODING       2
#define asn1SccTestInteger_REQUIRED_BITS_FOR_ENCODING        14

flag asn1SccTestInteger_Encode(const asn1SccTestInteger* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TESTINTEGER		3  /**/
flag asn1SccTestInteger_Decode(asn1SccTestInteger* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccTestInteger_REQUIRED_BYTES_FOR_ACN_ENCODING       2
#define asn1SccTestInteger_REQUIRED_BITS_FOR_ACN_ENCODING        14

#define ERR_ACN_ENCODE_TESTINTEGER		4  /**/

flag asn1SccTestInteger_ACN_Encode(const asn1SccTestInteger* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TESTINTEGER		5  /**/
flag asn1SccTestInteger_ACN_Decode(asn1SccTestInteger* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount;
    asn1SccTestInteger arr[4];
} asn1SccTestArray;

flag asn1SccTestArray_Equal(const asn1SccTestArray* pVal1, const asn1SccTestArray* pVal2);

#define ERR_TESTARRAY		16  /*(SIZE(0..4))*/
#define ERR_TESTARRAY_ELM_2		11  /**/
flag asn1SccTestArray_IsConstraintValid(const asn1SccTestArray* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccTestArray asn1SccTestArray_constant;
#else
#define asn1SccTestArray_constant {.nCount = 0, .arr  = {[0 ... 4-1] = 0UL }}
#endif

void asn1SccTestArray_Initialize(asn1SccTestArray* pVal);

#define ERR_UPER_ENCODE_TESTARRAY		17  /**/
#define ERR_UPER_ENCODE_TESTARRAY_ELM_2		12  /**/
#define asn1SccTestArray_REQUIRED_BYTES_FOR_ENCODING       8
#define asn1SccTestArray_REQUIRED_BITS_FOR_ENCODING        59

flag asn1SccTestArray_Encode(const asn1SccTestArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TESTARRAY		18  /**/
#define ERR_UPER_DECODE_TESTARRAY_ELM_2		13  /**/
flag asn1SccTestArray_Decode(asn1SccTestArray* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccTestArray_REQUIRED_BYTES_FOR_ACN_ENCODING       8
#define asn1SccTestArray_REQUIRED_BITS_FOR_ACN_ENCODING        59

#define ERR_ACN_ENCODE_TESTARRAY		19  /**/
#define ERR_ACN_ENCODE_TESTARRAY_ELM_2		14  /**/

flag asn1SccTestArray_ACN_Encode(const asn1SccTestArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TESTARRAY		20  /**/
#define ERR_ACN_DECODE_TESTARRAY_ELM_2		15  /**/
flag asn1SccTestArray_ACN_Decode(asn1SccTestArray* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccTestStruct --------------------------------------------*/
typedef struct {
    asn1SccTestInteger id;
    asn1SccTestArray payload;

} asn1SccTestStruct;

flag asn1SccTestStruct_Equal(const asn1SccTestStruct* pVal1, const asn1SccTestStruct* pVal2);

#define ERR_TESTSTRUCT		36  /**/
#define ERR_TESTSTRUCT_ID_2		26  /**/
#define ERR_TESTSTRUCT_PAYLOAD		31  /**/
flag asn1SccTestStruct_IsConstraintValid(const asn1SccTestStruct* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccTestStruct asn1SccTestStruct_constant;
#else
#define asn1SccTestStruct_constant {.id = 0UL, .payload = asn1SccTestArray_constant}
#endif

void asn1SccTestStruct_Initialize(asn1SccTestStruct* pVal);

#define ERR_UPER_ENCODE_TESTSTRUCT		37  /**/
#define ERR_UPER_ENCODE_TESTSTRUCT_ID_2		27  /**/
#define ERR_UPER_ENCODE_TESTSTRUCT_PAYLOAD		32  /**/
#define asn1SccTestStruct_REQUIRED_BYTES_FOR_ENCODING       10
#define asn1SccTestStruct_REQUIRED_BITS_FOR_ENCODING        73

flag asn1SccTestStruct_Encode(const asn1SccTestStruct* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TESTSTRUCT		38  /**/
#define ERR_UPER_DECODE_TESTSTRUCT_ID_2		28  /**/
#define ERR_UPER_DECODE_TESTSTRUCT_PAYLOAD		33  /**/
flag asn1SccTestStruct_Decode(asn1SccTestStruct* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccTestStruct_REQUIRED_BYTES_FOR_ACN_ENCODING       10
#define asn1SccTestStruct_REQUIRED_BITS_FOR_ACN_ENCODING        73

#define ERR_ACN_ENCODE_TESTSTRUCT		39  /**/
#define ERR_ACN_ENCODE_TESTSTRUCT_ID_2		29  /**/
#define ERR_ACN_ENCODE_TESTSTRUCT_PAYLOAD		34  /**/

flag asn1SccTestStruct_ACN_Encode(const asn1SccTestStruct* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TESTSTRUCT		40  /**/
#define ERR_ACN_DECODE_TESTSTRUCT_ID_2		30  /**/
#define ERR_ACN_DECODE_TESTSTRUCT_PAYLOAD		35  /**/
flag asn1SccTestStruct_ACN_Decode(asn1SccTestStruct* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int32;


flag asn1SccT_Int32_Equal(const asn1SccT_Int32* pVal1, const asn1SccT_Int32* pVal2);

#define ERR_T_INT32		41  /*(-2147483648 .. 2147483647)*/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccT_Int32 asn1SccT_Int32_constant;
#else
#define asn1SccT_Int32_constant 0LL
#endif

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_UPER_ENCODE_T_INT32		42  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		43  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING       4
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ACN_ENCODING        32

#define ERR_ACN_ENCODE_T_INT32		44  /**/

flag asn1SccT_Int32_ACN_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT32		45  /**/
flag asn1SccT_Int32_ACN_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


flag asn1SccT_UInt32_Equal(const asn1SccT_UInt32* pVal1, const asn1SccT_UInt32* pVal2);

#define ERR_T_UINT32		46  /*(0 .. 4294967295)*/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccT_UInt32 asn1SccT_UInt32_constant;
#else
#define asn1SccT_UInt32_constant 0UL
#endif

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_UPER_ENCODE_T_UINT32		47  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		48  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING       4
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING        32

#define ERR_ACN_ENCODE_T_UINT32		49  /**/

flag asn1SccT_UInt32_ACN_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT32		50  /**/
flag asn1SccT_UInt32_ACN_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Runtime_Error --------------------------------------------*/

typedef enum {
    T_Runtime_Error_NONE,
    T_Runtime_Error_noerror_PRESENT,
    T_Runtime_Error_encodeerror_PRESENT,
    T_Runtime_Error_decodeerror_PRESENT
} asn1SccT_Runtime_Error_selection;

typedef union {
    asn1SccT_UInt32 noerror;
    asn1SccT_Int32 encodeerror;
    asn1SccT_Int32 decodeerror;
} asn1SccT_Runtime_Error_unchecked_union;

typedef struct {
    asn1SccT_Runtime_Error_selection kind;

    asn1SccT_Runtime_Error_unchecked_union u;
} asn1SccT_Runtime_Error;

flag asn1SccT_Runtime_Error_Equal(const asn1SccT_Runtime_Error* pVal1, const asn1SccT_Runtime_Error* pVal2);

#define ERR_T_RUNTIME_ERROR		81  /**/
#define ERR_T_RUNTIME_ERROR_NOERROR_2		56  /**/
#define ERR_T_RUNTIME_ERROR_ENCODEERROR_2		66  /**/
#define ERR_T_RUNTIME_ERROR_DECODEERROR_2		76  /**/
flag asn1SccT_Runtime_Error_IsConstraintValid(const asn1SccT_Runtime_Error* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccT_Runtime_Error asn1SccT_Runtime_Error_constant;
#else
#define asn1SccT_Runtime_Error_constant {.kind = T_Runtime_Error_noerror_PRESENT, .u.noerror = 0UL}
#endif

void asn1SccT_Runtime_Error_Initialize(asn1SccT_Runtime_Error* pVal);

#define ERR_UPER_ENCODE_T_RUNTIME_ERROR		82  /**/
#define ERR_UPER_ENCODE_T_RUNTIME_ERROR_NOERROR_2		57  /**/
#define ERR_UPER_ENCODE_T_RUNTIME_ERROR_ENCODEERROR_2		67  /**/
#define ERR_UPER_ENCODE_T_RUNTIME_ERROR_DECODEERROR_2		77  /**/
#define asn1SccT_Runtime_Error_REQUIRED_BYTES_FOR_ENCODING       5
#define asn1SccT_Runtime_Error_REQUIRED_BITS_FOR_ENCODING        34

flag asn1SccT_Runtime_Error_Encode(const asn1SccT_Runtime_Error* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_RUNTIME_ERROR		83  /**/
#define ERR_UPER_DECODE_T_RUNTIME_ERROR_NOERROR_2		58  /**/
#define ERR_UPER_DECODE_T_RUNTIME_ERROR_ENCODEERROR_2		68  /**/
#define ERR_UPER_DECODE_T_RUNTIME_ERROR_DECODEERROR_2		78  /**/
flag asn1SccT_Runtime_Error_Decode(asn1SccT_Runtime_Error* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_Runtime_Error_REQUIRED_BYTES_FOR_ACN_ENCODING       5
#define asn1SccT_Runtime_Error_REQUIRED_BITS_FOR_ACN_ENCODING        34

#define ERR_ACN_ENCODE_T_RUNTIME_ERROR		84  /**/
#define ERR_ACN_ENCODE_T_RUNTIME_ERROR_NOERROR_2		59  /**/
#define ERR_ACN_ENCODE_T_RUNTIME_ERROR_ENCODEERROR_2		69  /**/
#define ERR_ACN_ENCODE_T_RUNTIME_ERROR_DECODEERROR_2		79  /**/

flag asn1SccT_Runtime_Error_ACN_Encode(const asn1SccT_Runtime_Error* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_RUNTIME_ERROR		85  /**/
#define ERR_ACN_DECODE_T_RUNTIME_ERROR_NOERROR_2		60  /**/
#define ERR_ACN_DECODE_T_RUNTIME_ERROR_ENCODEERROR_2		70  /**/
#define ERR_ACN_DECODE_T_RUNTIME_ERROR_DECODEERROR_2		80  /**/
flag asn1SccT_Runtime_Error_ACN_Decode(asn1SccT_Runtime_Error* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


flag asn1SccT_Int8_Equal(const asn1SccT_Int8* pVal1, const asn1SccT_Int8* pVal2);

#define ERR_T_INT8		86  /*(-128 .. 127)*/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccT_Int8 asn1SccT_Int8_constant;
#else
#define asn1SccT_Int8_constant 0LL
#endif

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_UPER_ENCODE_T_INT8		87  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		88  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ACN_ENCODING        8

#define ERR_ACN_ENCODE_T_INT8		89  /**/

flag asn1SccT_Int8_ACN_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT8		90  /**/
flag asn1SccT_Int8_ACN_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


flag asn1SccT_UInt8_Equal(const asn1SccT_UInt8* pVal1, const asn1SccT_UInt8* pVal2);

#define ERR_T_UINT8		91  /*(0 .. 255)*/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccT_UInt8 asn1SccT_UInt8_constant;
#else
#define asn1SccT_UInt8_constant 0UL
#endif

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_UPER_ENCODE_T_UINT8		92  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		93  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

#define ERR_ACN_ENCODE_T_UINT8		94  /**/

flag asn1SccT_UInt8_ACN_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT8		95  /**/
flag asn1SccT_UInt8_ACN_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


flag asn1SccT_Boolean_Equal(const asn1SccT_Boolean* pVal1, const asn1SccT_Boolean* pVal2);

#define ERR_T_BOOLEAN		96  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccT_Boolean asn1SccT_Boolean_constant;
#else
#define asn1SccT_Boolean_constant FALSE
#endif

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_UPER_ENCODE_T_BOOLEAN		97  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		98  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING        1

#define ERR_ACN_ENCODE_T_BOOLEAN		99  /**/

flag asn1SccT_Boolean_ACN_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BOOLEAN		100  /**/
flag asn1SccT_Boolean_ACN_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Null_Record --------------------------------------------*/
typedef struct {

} asn1SccT_Null_Record;

flag asn1SccT_Null_Record_Equal(const asn1SccT_Null_Record* pVal1, const asn1SccT_Null_Record* pVal2);

#define ERR_T_NULL_RECORD		101  /**/
flag asn1SccT_Null_Record_IsConstraintValid(const asn1SccT_Null_Record* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccT_Null_Record asn1SccT_Null_Record_constant;
#else
#define asn1SccT_Null_Record_constant {}
#endif

void asn1SccT_Null_Record_Initialize(asn1SccT_Null_Record* pVal);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccT_Null_Record_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ACN_ENCODING       0
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ACN_ENCODING        0


flag asn1SccT_Null_Record_ACN_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_ACN_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccPID_Range;


flag asn1SccPID_Range_Equal(const asn1SccPID_Range* pVal1, const asn1SccPID_Range* pVal2);

#define ERR_PID_RANGE		106  /*(0..3)*/
flag asn1SccPID_Range_IsConstraintValid(const asn1SccPID_Range* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccPID_Range asn1SccPID_Range_constant;
#else
#define asn1SccPID_Range_constant 0UL
#endif

void asn1SccPID_Range_Initialize(asn1SccPID_Range* pVal);

#define ERR_UPER_ENCODE_PID_RANGE		107  /**/
#define asn1SccPID_Range_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccPID_Range_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccPID_Range_Encode(const asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID_RANGE		108  /**/
flag asn1SccPID_Range_Decode(asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccPID_Range_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define asn1SccPID_Range_REQUIRED_BITS_FOR_ACN_ENCODING        2

#define ERR_ACN_ENCODE_PID_RANGE		109  /**/

flag asn1SccPID_Range_ACN_Encode(const asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PID_RANGE		110  /**/
flag asn1SccPID_Range_ACN_Decode(asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    PID_corecomponent = 0,
    PID_orchestratorcomponent = 1,
    PID_utilitycomponent = 2,
    PID_env = 3
} asn1SccPID;

// please use the following macros to avoid breaking code.
#define asn1SccPID_corecomponent PID_corecomponent
#define asn1SccPID_orchestratorcomponent PID_orchestratorcomponent
#define asn1SccPID_utilitycomponent PID_utilitycomponent
#define asn1SccPID_env PID_env

flag asn1SccPID_Equal(const asn1SccPID* pVal1, const asn1SccPID* pVal2);

#define ERR_PID		111  /*corecomponent | orchestratorcomponent | utilitycomponent | env*/
flag asn1SccPID_IsConstraintValid(const asn1SccPID* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccPID asn1SccPID_constant;
#else
#define asn1SccPID_constant PID_corecomponent
#endif

void asn1SccPID_Initialize(asn1SccPID* pVal);

#define ERR_UPER_ENCODE_PID		112  /**/
#define asn1SccPID_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccPID_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccPID_Encode(const asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID		113  /**/
flag asn1SccPID_Decode(asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccPID_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define asn1SccPID_REQUIRED_BITS_FOR_ACN_ENCODING        2

#define ERR_ACN_ENCODE_PID		114  /**/

flag asn1SccPID_ACN_Encode(const asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PID		115  /**/
flag asn1SccPID_ACN_Decode(asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode);


/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */



#ifdef  __cplusplus
}

#endif

#endif
